;;******************************************************
;;*  Program Name: Emacs
;;*  Project Name: SELF
;;*  Organization: The 6th Column Group
;;*  Coordinator : Gavin M. Bell
;;*
;;* Description: The resource file for .emacs... nuff said
;;* 
;;******************************************************

(setq inhibit-splash-screen t)
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 1)
(setq transient-mark-mode nil)

(require 'font-lock)
(global-font-lock-mode t)

(set-default-font "-Misc-Fixed-Medium-R-SemiCondensed--13-120-75-75-C-60-ISO8859-1")

(put 'narrow-to-region 'disabled nil)

(load "~/.emacs.d/custom/overlay-fix.el")

(add-hook 'clojure-mode-hook 'paredit-mode)

(setq tramp-default-user "${USER}")

(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(global-set-key "\C-cf" 'auto-fill-mode)

(add-to-list 'load-path "~/.emacs.d/")
(require 'package)
(add-to-list 'package-archives
         '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

;;http://magit.github.com/magit/magit.html
(require 'magit)
(require 'magit-topgit)
(global-set-key "\C-cg" 'magit-status)
(transient-mark-mode 'disabled)

(global-set-key "\M-n" 'next-error)
(global-set-key "\M-p" 'previous-error)
(global-set-key "\C-h" 'delete-backward-char)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\C-xp" 'revert-buffer)
(global-set-key "\M-R" 'replace-string)
(global-set-key "\e." 'find-tag-other-frame)
(global-set-key "\C-x." 'find-tag)

(global-set-key "\M-s" 'search-forward-regexp)

;;-----
;;source code formatting prefs.
;;-----
(setq c-basic-offset 4)
(setq tab-width 4)
(setq indent-tabs-mode nil)

(setq-default c-basic-offset 4)
(setq-default indent-tabs-mode nil)

(defun my-java-mode-hook ()
  (setq c-basic-offset 4)
  (setq tab-width 4)
  (setq indent-tabs-mode nil))
(add-hook 'java-mode-hook 'my-java-mode-hook)

(global-set-key "\C-\M-]" 'untabify)
;;-----

(setq minibuffer-max-depth nil)

(display-time)
(setq auto-save-interval 900)
(setq line-number-mode t)
(setq frame-title-format
  '("%S: " (buffer-file-name "%f" (dired-directory dired-directory "%b"))))

(setq default-major-mode 'text-mode)
(setq initial-major-mode 'text-mode)
(setq scroll-step 1)
(mouse-wheel-mode t)
(setq text-mode-hook '(lambda () (auto-fill-mode 1)))
(setq font-lock-maximum-decoration t)

(require 'paren)
(show-paren-mode 1)
;;  (paren-set-mode 'sexp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Looks...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set-face-attribute 'default nil :font "-Misc-Fixed-Medium-R-SemiCondensed--13-120-75-75-C-60-ISO8859-1")
(set-face-background 'default      "black")     ; frame background
(set-face-foreground 'default      "navajowhite")      ; normal text

;;(set-face-background 'default      "wheat")     ; frame background
;;(set-face-foreground 'default      "black")      ; normal text

(set-face-background 'highlight    "black")       ; Ie when selecting buffers
(set-face-foreground 'highlight    "yellow")
(set-face-background 'modeline     "DarkSlateGray")       ; Line at bottom of buffer
(set-face-foreground 'modeline     "wheat")
(set-face-background 'scroll-bar   "DarkSlateGray")
(setq x-pointer-foreground-color   "green")      ; Adds to bg color,
                                                 ; so keep black
(setq x-pointer-background-color   "blue")       ; This is color you really
                                                 ; want ptr/crsr
(setq font-lock-use-default-fonts "fixed")
;;(setq font-lock-use-default-colors "green")

(copy-face 'default 'font-lock-comment-face)
(set-face-foreground 'font-lock-comment-face "tan")
(copy-face 'default 'font-lock-variable-name-face)
(set-face-foreground 'font-lock-variable-name-face "palegreen")
(copy-face 'default 'font-lock-type-face)
(set-face-foreground 'font-lock-type-face "coral")
(copy-face 'italic 'font-lock-string-face)
(set-face-foreground 'font-lock-string-face "lightgray")
(copy-face 'default 'font-lock-function-name-face)
(set-face-foreground 'font-lock-function-name-face "white")
(copy-face 'default 'font-lock-keyword-face)
(set-face-foreground 'font-lock-keyword-face "goldenrod")
(copy-face 'default 'font-lock-reference-face)
(set-face-foreground 'font-lock-reference-face "goldenrod")

(put 'eval-expression 'disabled nil)
(put 'upcase-region 'disabled nil)

(defun replace-sequence (from pre start total query-flag regexp-flag) 
  (let ((cur (- (+ start total) 1)) (pt 0) 
    (repl nil) (str (concat pre "%d")))
    (while (< pt total)
      (setq repl (cons (format str cur) repl))
      (setq pt (+ pt 1))
      (setq cur (- cur 1)))
    (perform-replace from repl query-flag regexp-flag nil)))

(custom-set-variables
 '(paren-mode (quote paren) nil (paren))
 '(column-number-mode t)
 '(default-toolbar-position (quote right))
 '(modeline-click-swaps-buffers t)
 '(user-mail-address "cue@garvey.6thcolumn.org" t)
 '(query-user-mail-address nil))
(custom-set-faces)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; MUDS!:                                                                  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;jmud stuff
(setq load-path (cons (expand-file-name "~/.emacs.d/custom/moolisp")
                      load-path))
(autoload 'moo-code-mode "j-moo-code" "Major mode for editing MOO-code." t)
(setq auto-mode-alist (cons '("\\.moo$" . moo-code-mode) auto-mode-alist))
(global-set-key "\C-cm" 'mud)
(setq moo-use-@program t)
(setq moo-browser-worlds '(("LambdaMOO")))
(setq use-suppress-all-input t)
(setq moo-filter-hook
      (setq tinymud-filter-hook
            '(mud-check-triggers mud-check-reconnect mud-fill-lines)))
(setq jmud-directory (expand-file-name "~/.emacs.d/custom/moolisp"))
(setq j-mud-libraries-list
      (list
       "j-mud-worlds"
       "j-mud"
       "j-mud-get"
       "j-mud-macros"
       "j-mud-history"
       "j-mud-upload"
       "prefix"
       "j-boom-tree"
       "j-boom-obj"
       "j-boom"
       "j-lp"
       "j-tiny"
       "j-moo"
       "j-moo-code"))
(defun j-mud-load () (interactive) (mapcar 'load-library j-mud-libraries-list))
(j-mud-load)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Some personal Gavin niceness...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "~/.emacs.d/custom/keys.el")
(load "~/.emacs.d/custom/frills.el")
(load "~/.emacs.d/custom/half-height.el")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Misc misc...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key "\C-cp" 'paredit-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Keyboard Macros
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(fset 'println
   [?\C-a ?\C-o tab ?i ?f ?( ?D ?E ?B ?U ?G ?) ?s backspace ?S ?y ?s ?t ?e ?m ?. ?o ?u ?t ?. ?p ?r ?i ?n ?t ?l ?n ?( ?" ?" ?) ?; left left left])

(fset 'dos2unix
   [?u ?2 ?d ?\C-[ ?< ?\C-[ ?x ?r ?e ?p ?l ?a ?c ?e ?- ?s ?t tab return ?\C-q ?\C-m return return ?\C-[ ?< ?\C-s ?u ?2 ?d ?\C-b ?\C-b ?\C-b ?\C-d ?\C-d ?\C-d])

(defalias 'debugline (read-kbd-macro
"ESC < C-s class C-b C-s { C-e 2*RET TAB private SPC static SPC final SPC boolean SPC DEBUG SPC = SPC true; RET TAB"))
(global-set-key "\C-cd" 'debugline)


(defalias 'jprint
  (read-kbd-macro "C-a TAB if(DEBUG)System.out.pri ntln(\"\"); 3*<left>"))
;(global-set-key "\ep" 'jprint)

(defalias 'dos2unix (read-kbd-macro
"ESC < ESC x repl TAB st TAB RET C-q C-m 2*RET ESC <"))
(global-set-key "\C-cu" 'dos2unix)

(defalias 'unix2dos (read-kbd-macro
"ESC x replace- e <backspace> reg TAB RET $ RET C-q C-m RET ESC <"))
(global-set-key "\C-cU" 'unix2dos)

(defalias 'header (read-kbd-macro
"ESC < C-x i C-a 2*<C-f> C-k .emacs 5*<backspace> header RET C-s des C-f C-e RET TAB"))
(global-set-key "\C-ch" 'header)

(defalias 'putheader (read-kbd-macro
"ESC < ESC x inser TAB f TAB RET .he TAB RET C-s des C-e RET TAB"))
