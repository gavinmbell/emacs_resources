(defconst mud-goehring-type-separator
  "------------------------------------------------------------------------------$"
  "Regexp that denotes a new type in a goehring list.")

(defconst mud-goehring-description-line
  "\\*?\\(\\S-+\\( \\S-+\\)*\\)[ \t]+\\([a-z0-9?*.]+\\).*[ \t]+\\([0-9.?*]+\\),?[ \t]+\\([0-9?*]+\\)[ \t]+[^ \t]+[ \t]*\\([0-9,]+\\)?"
  "Regexp for a line that describes a world in a goehring list.")
(defun mud-goehring-name ()
  (mud-match 1))
(defun mud-goehring-site ()
  (mud-match 3))
(defun mud-goehring-numsite ()
  (mud-match 4))
(defun mud-goehring-port ()
  (string-to-int (or (mud-match 5) "")))
(defun mud-goehring-notes ()
  (mud-match 6))

(defun mud-translate-goehring-list (name)
  (interactive "fFile to read Goehring list from: ")
  (let ((file (expand-file-name name))
	(old-buffer (current-buffer))
	(list-buffer (generate-new-buffer "*Goehring list*"))
	(out-buffer (generate-new-buffer "*MUD worlds*")))
    (set-buffer list-buffer)
    (buffer-flush-undo list-buffer)
    (insert-file-contents file)
    (re-search-forward mud-goehring-type-separator nil "limit")
    (forward-line)
    (while (not (looking-at "[ \t]*Notes$"))
      (let* ((type-name (if (looking-at "[ \t]*\\(.+\\)e?s (\\([0-9]+\\))$")
			    (mud-match 1)
			  (looking-at "[ \t]*\\(\\S-+\\) (\\([0-9]+\\))$")
			  (mud-match 1)))
	     (type (mud-world type-name))
	     (parent-name (if type (mud-name (mud-parent type)) "global")))
	(set-buffer out-buffer)
	(insert "(mud-subtype " (prin1-to-string type-name)
		" " (prin1-to-string parent-name) ")\n\n")
	(set-buffer list-buffer)
	(forward-line 3)
	(while (not (looking-at mud-goehring-type-separator))
	  (cond ((looking-at mud-goehring-description-line)
		 (let* ((site (mud-goehring-site))
;;;; 		 (site (if (memq site '("??" "**"))
;;;;	 		   site
;;;;			 (mud-goehring-numsite)))
			(name (mud-goehring-name))
			(port (mud-goehring-port)))
		   (forward-line)
		   (while (looking-at "  ")
		     (cond ((looking-at "  \\(\\S-+\\( \\S-+\\)*\\)")
			    (setq name (concat name " " (mud-match 1))))
			   ((looking-at "  ................\\(\\S-+\\).*$")
			    (setq site (concat site (mud-match 1)))))
		     (forward-line))
		   (set-buffer out-buffer)
		   (insert "(mud-add-world " (prin1-to-string name)
			   " " (prin1-to-string type-name) "\n"
			   "               nil nil\n"
			   "               " (prin1-to-string site)
			   " " (int-to-string port) "\n"
			   "               nil)\n\n")
		   (set-buffer list-buffer)))
		((looking-at ".*")
		 (message "Couldn't parse line: %s" (mud-match 0))
		 (forward-line)
		 (sleep-for 2)))))
      (forward-line))
    (kill-buffer list-buffer)
    (pop-to-buffer out-buffer)
    (message "Parsed Goehring list, please edit and save.")))
	
	  
