#!/bin/bash
#*****************************************************************
# Copyright (c) 2013 The 6Th Column Project, LLC
# All rights reserved.
# http://6thcolumn.org/LICENSE
#*****************************************************************
#
#  Organization: CodeWrx
#   Directorate: Computation
#    Department: Computing Applications and Research
#       Program: Tom Foolery
#       Project: EMACS-FOO
#  First Author: Gavin M. Bell (gavin@6thcolumn.org)
#
#   Description:
#   Need to "can" my emacs environment to make it cake to fire up
#   my development on another machine and to keep things consistent.
#   The usual rationale for these kinds of things.  I hope others
#   may find it useful as well.
#
#   Essentially, just a clean and easy way to setup your emacs
#   environment that is hassle free.  We use lots of different
#   machines... it makes it less painful
#
#   Sets up dot emacs files, .et al in your home directory
#   NOTE: use emacs 24.+ (for best results)
#         echo "  Emacs: http://ftp.gnu.org/pub/gnu/emacs/"
#
#*****************************************************************

DEBUG=0
DRY_RUN=0
FORCE=0

homedir=${homedir:-${HOME:?"HOME environment var must be set!!!!"}}

programs_to_check_for=("emacs")

# Utility "private" method
_readlinkf() {
    # This is a portable implementation of GNU's "readlink -f" in
    # bash/zsh, following symlinks recursively until they end in a
    # file, and will print the full dereferenced path of the specified
    # file even if the file isn't a symlink.
    #
    # Loop detection exists, but only as an abort after passing a
    # maximum length.

    local start_dir=$(pwd)
    local file=${1}
    cd $(dirname ${file})
    file=$(basename ${file})

    # Iterate down symlinks.  If we exceed a maximum number symlinks, assume that
    # we're looped and die horribly.
    local maxlinks=20
    local count=0
    local current_dir
    while [ -L "${file}" ] ; do
        file=$(readlink ${file})
        cd $(dirname ${file})
        file=$(basename ${file})
        ((count++))
        if (( count > maxlinks )) ; then
            current_dir=$(pwd -P)
            echo "CRITICAL FAILURE[4]: symlink loop detected on ${current_dir}/${file}"
            cd ${start_dir}
            return ${count}
        fi
    done
    current_dir=$(pwd -P)
    echo "${current_dir}/${file}"
    cd ${start_dir}
}

_same_place() {
    local place1=$1
    local place2=$2
    ((DEBUG)) && echo "place 1 = ${place1}"
    ((DEBUG)) && echo "place 2 = ${place2}"

    if [ -e "${place1}" ] && [ -e "${place2}" ]; then
        if [ "$(_readlinkf ${place1})" = "$(_readlinkf ${place2})" ]; then
            ((DEBUG)) && echo "${place1} and ${place2} are the same"
            return 0
        else 
            ((DEBUG)) && echo "${place1} and ${place2} are NOT the same"
           return 1
        fi
    fi
}

quick_checks() {
    local oops_count=0
    for program in ${programs_to_check_for[@]}; do
        ${program} --version >& /dev/null
        if [ $? != 0 ]; then
            ((oops_count++))
            echo "Couldn't find [${program}]"
        fi
    done
    if ((oops_count > 0)); then
        echo "Warning: You may want to install the missing program(s) for optimum use..."
            echo "  Please install the missing program(s) for optimum use (yum, apt-get, rpm, etc..)"
    fi
}

setup_top_level_dir() {
    ((DEBUG)) && echo "*** setup_top_level_dir ***"
    local target_name="${homedir}/.emacs.d"
    local source_name="$(_readlinkf ${BASH_SOURCE[0]%/*})"
    source_name=${source_name%/*}

    ((DEBUG)) && echo "Target Name = ${target_name}"
    ((DEBUG)) && echo "Source Name = ${source_name}"

    echo -n "setting up \"${target_name}\" ... "
    if _same_place $target_name $source_name && [ -L "${target_name}" ]; then
        echo "[OK] (nothing to do already linked)"
    else
        [ -e "${target_name}" ] && mv ${target_name}{,.bak}
        ((DEBUG)) && echo "ln -s ${source_name} ${target_name}"
        ln -s ${source_name} ${target_name}
        if [ $? != 0 ]; then 
            echo "ERROR: problem linking ${target_name} -> ${source_name}"
            return 1
        else 
            echo " linked file... [OK] "
        fi
    fi
    return 0
}

setup_config_files() {
    ((DEBUG)) && echo "*** setup_config_files ***"
    [ ! -e .git ] && echo "Sorry this is not a git repo" && exit 1
    local mod_count=0
    for dot_file in $(ls -a | egrep '^dot_*'); do
        echo -n "setting up \"${dot_file/dot_/.}\" ... "

        #check if the file exists already
        ((DEBUG)) && echo "[ "$(_readlinkf ${dot_file})" = "$(_readlinkf ${homedir}/${dot_file/dot_/.})" ]"
        if [ "$(_readlinkf ${dot_file})" = "$(_readlinkf ${homedir}/${dot_file/dot_/.})" ]; then
            echo "[OK] (nothing to do already linked)"
        else
            ((DEBUG|DRY_RUN)) && echo "[ -e ${homedir}/${dot_file/dot_/.} ]  && mv -v ${homedir}/${dot_file/dot_/.}{,.bak}"
            ((! DRY_RUN)) && echo "here" && [ -e ${homedir}/${dot_file/dot_/.} ] && mv -v ${homedir}/${dot_file/dot_/.}{,.bak}
            ((DEBUG||DRY_RUN)) && echo "ln -s $(_readlinkf ${dot_file}) ${homedir}/${dot_file/dot_/.}"
            if ((! DRY_RUN)); then
                ((FORCE & DEBUG)) && echo "[ -L "${homedir}/${dot_file/dot_/.}" ] && [ "$(_readlinkf ${homedir}/${dot_file/dot_/.})" != "$(_readlinkf ${dot_file})" ] && unlink ${homedir}/${dot_file/dot_/.}"
                ((FORCE)) && [ -L "${homedir}/${dot_file/dot_/.}" ] && [ "$(_readlinkf ${homedir}/${dot_file/dot_/.})" != "$(_readlinkf ${dot_file})" ] && unlink ${homedir}/${dot_file/dot_/.}
                ln -s $(_readlinkf ${dot_file}) ${homedir}/${dot_file/dot_/.}
                if [ $? != 0 ]; then echo "ERROR: problem linking ${dot_file/dot_/.}"; else echo " linked file... [OK] " && ((++mod_count)); fi
            fi
        fi
    done
    # A succesful run (returning 0) is when some work or change in state has occured from the installation
    # If no work had to be done then it returns 1
    # This allows for the capability to condition subsequent action based on the behavior of this function.
    ((mod_count > 0)) && return 0 || return 1
}

revert_homedir() {
    [ ! -e .git ] && echo "Sorry this is not a git repo" && exit 1
    echo " Revert Not Yet Implemented"
    return 0
}

_usage() {
    printf "
Usage:
  > setup
           --install - Runs the installation process [default]
           --revert  - Uninstalls the system [not yet implemented]
           --help|-h - Prints this help message
           --debug   - Runs in debug mode (more output)
           --dry-run - Will not perform operations but will print what would be done

"
    exit 0
}

main() {
    while [ -n "$1" ]; do
	case "$1" in
	    --install)
		shift
                INSTALL=1
		;;
	    --revert)
                shift
                REVERT=1
		;;
	    --help|-h)
		_usage
		;;
            --debug)
                shift
                DEBUG=1
                ;;
            --force)
                shift
                FORCE=1
                ;;
            --dry-run)
                shift
                DRY_RUN=1
                ;;
	    *)
                echo "Unknown option $1"
                exit 1
	esac
    done

    ((DEBUG)) && echo "Debug mode on"
    ((DRY_RUN)) && echo "Dry run mode on"

    if ((REVERT)); then revert_homedir; exit $?; fi

    #Functions that peform the installtion....
    quick_checks && setup_top_level_dir && setup_config_files $@
}

main $@
