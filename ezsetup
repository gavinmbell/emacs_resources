#!/bin/bash
#*****************************************************************
# Copyright (c) 2013 The 6Th Column Project, LLC
# All rights reserved.
# http://6thcolumn.org/LICENSE
#*****************************************************************
#
#  Organization: CodeWrx
#   Directorate: Computation
#    Department: Computing Applications and Research
#       Program: Tom Foolery
#       Project: EMACS-FOO
#  First Author: Gavin M. Bell (gavin@6thcolumn.org)
#
#   Description:
#   Need to "can" my emacs environment to make it cake to fire up
#   my development on another machine and to keep things consistent.
#   The usual rationale for these kinds of things.  I hope others
#   may find it useful as well.
#
#   Essentially, just a clean and easy way to setup your emacs
#   environment that is hassle free.  We use lots of different
#   machines... it makes it less painful
#
#   Sets up dot emacs files, .et al in your home directory
#   NOTE: use emacs 24.+ (for best results)
#         echo "  Emacs: http://ftp.gnu.org/pub/gnu/emacs/"
#
#*****************************************************************

DEBUG=0
DRY_RUN=0
FORCE=0

do_fetch_n_setup() {
    echo -n "checking for git... "
    local v=$(git --version 2> /dev/null)
    [ $? != 0 ] || [ -z "${v}" ] && echo "Sorry, you need git to run this installer" && exit 1
    echo "[OK]"

    #Okay so now let's do some installation magic...
    local __destination=${1:-${__destination:-${HOME:-~}}} >& /dev/null
    shift
    echo "destination = ${__destination}"
    
    [ ! -d "${__destination}" ] && echo "Sorry this installation destination does not exist" && exit 2
   #[ ! -f "${__destination}/.git/config" ] && echo "Sorry this location is already under git source control" && exit 3

    git clone git://github.com/gavinmbell/emacs_resources.git ${__destination}/.emacs_resources # 2> /dev/null
    cd  ${__destination}/.emacs_resources
    ./setup $@ && echo "ezsetup complete"
}
_usage() {
    printf "
Usage:
  > ezsetup <top level dir to checkout repo> [flags]

           --install - Runs the installation process [default]
           --revert  - Uninstalls the system [not yet implemented]
           --help|-h - Prints this help message
           --debug   - Runs in debug mode (more output)
           --dry-run - Will not perform operations but will print what would be done

"
    exit 0
}

main() {
    while [ -n "$1" ]; do
	case "$1" in
	    --install)
		shift
                INSTALL=1
		;;
	    --revert)
                shift
                REVERT=1
		;;
	    --help|-h)
		_usage
		;;
            --debug)
                shift
                DEBUG=1
                ;;
            --force)
                shift
                FORCE=1
                ;;
            --dry-run)
                shift
                DRY_RUN=1
                ;;
	    *)
                echo "Unknown option $1"
                exit 1
	esac
    done

    ((DEBUG)) && echo "Debug mode on"
    ((DRY_RUN)) && echo "Dry run mode on"

    if ((REVERT)); then revert_homedir; exit $?; fi

    #Functions that peform the installtion....
    do_fetch_n_setup $@
}

main $@

